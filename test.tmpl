// Copyright Â© 2016 Abcum Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Pack}}

import (
	"io"
	"io/ioutil"
	"os"
	"testing"

	. "github.com/smartystreets/goconvey/convey"

	{{if eq .Pack "s3"}}
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	{{end}}

	{{if eq .Pack "gcs"}}
	"context"
	"cloud.google.com/go/storage"
	{{end}}
)

var run = 10000
var sze int
var txt []byte
var out []byte

func init() {

	os.RemoveAll("{{.Path}}")

	{{if eq .Pack "s3"}}
	n := session.Must(session.NewSession())
	s := s3.New(n, &aws.Config{Region: aws.String("eu-west-1")})
	s.ListObjectsPages(&s3.ListObjectsInput{
		Bucket: aws.String("{{.Buck}}"),
		Prefix: aws.String("{{.Path}}"),
	}, func(p *s3.ListObjectsOutput, last bool) bool {
		for _, f := range p.Contents {
			s.DeleteObject(&s3.DeleteObjectInput{
				Bucket: aws.String("{{.Buck}}"),
				Key: f.Key,
			})
		}
		return true
	})
	{{end}}

	{{if eq .Pack "gcs"}}
	x := context.Background()
	c, e := storage.NewClient(x)
	if e != nil {
		panic(e)
	}
	b := c.Bucket("{{.Buck}}")
	i := b.Objects(x, &storage.Query{Prefix:"{{.Path}}"})
	for {
	    o, e := i.Next()
	    if e != nil {
		    break
	    }
	    b.Object(o.Name).Delete(x)
    }
	{{end}}

	txt, _ = ioutil.ReadFile("../data.txt")

}

func TestMain(t *testing.T) {

	defer func() {
		os.RemoveAll("{{.Path}}")
	}()

	{{if eq .Pack "s3"}}
	defer func() {
		n := session.Must(session.NewSession())
		s := s3.New(n, &aws.Config{Region: aws.String("eu-west-1")})
		s.ListObjectsPages(&s3.ListObjectsInput{
			Bucket: aws.String("{{.Buck}}"),
			Prefix: aws.String("{{.Path}}"),
		}, func(p *s3.ListObjectsOutput, last bool) bool {
			for _, f := range p.Contents {
				s.DeleteObject(&s3.DeleteObjectInput{
					Bucket: aws.String("{{.Buck}}"),
					Key: f.Key,
				})
			}
			return true
		})
	}()
	{{end}}

	{{if eq .Pack "gcs"}}
	defer func() {
		x := context.Background()
		c, e := storage.NewClient(x)
		if e != nil {
			panic(e)
		}
		b := c.Bucket("{{.Buck}}")
		i := b.Objects(x, &storage.Query{Prefix:"{{.Path}}"})
		for {
		    o, e := i.Next()
		    if e != nil {
			    break
		    }
		    b.Object(o.Name).Delete(x)
	    }
    }()
	{{end}}

	var s *Storage

	Convey("Create a new {{.Pack}} syncr instance", t, func() {
		{{if .Opts}}h, e := New("{{.Name}}", {{.Opts}}){{else}}h, e := New("{{.Name}}"){{end}}
		So(e, ShouldBeNil)
		s = h
	})

	Convey("Read data from the {{.Pack}} syncr instance", t, func() {
		s.Seek(0, 0)
		b := make([]byte, 128)
		_, e := s.Read(b)
		So(e, ShouldEqual, io.EOF)
	})

	Convey("Write data to the {{.Pack}} syncr instance", t, func() {
		s.Seek(0, 0)
		for i := 0; i < run; i++ {
			l, e := s.Write(txt)
			sze += l
			if e != nil {
				if e != io.EOF {
					panic(e)
				}
				break
			}
		}
		So(sze, ShouldEqual, run*len(txt))
	})

	Convey("Sync data to the {{.Pack}} syncr instance", t, func() {
		So(s.Sync(), ShouldBeNil)
	})

	Convey("Read data from the {{.Pack}} syncr instance", t, func() {
		vs := []int{12, 128, 1024, 1024 * 1024 * 4}
		for _, v := range vs {
			out = nil
			s.Seek(0, 0)
			for i := 0; ; i += v {
				b := make([]byte, v)
				l, e := s.Read(b)
				out = append(out, b[:l]...)
				if e != nil {
					if e != io.EOF {
						panic(e)
					}
					break
				}
			}
			So(len(out), ShouldEqual, run*len(txt))
			So(out[:len(txt)], ShouldResemble, txt)
			So(out[len(out)-len(txt):], ShouldResemble, txt)
		}
	})

	{{if ne .Pack "file"}}
	Convey("Attempt to seek to positions", t, func() {
		var e error
		_, e = s.Seek(0, 0)
		So(e, ShouldBeNil)
		_, e = s.Seek(1, 0)
		So(e, ShouldNotBeNil)
		_, e = s.Seek(2, 0)
		So(e, ShouldNotBeNil)
		_, e = s.Seek(0, 1)
		So(e, ShouldNotBeNil)
		_, e = s.Seek(0, 2)
		So(e, ShouldBeNil)
	})
	{{end}}

	Convey("Close the {{.Pack}} syncr instance", t, func() {
		So(s.Close(), ShouldBeNil)
	})

	Convey("Close again", t, func() {
		So(s.Close(), ShouldBeNil)
	})

}
